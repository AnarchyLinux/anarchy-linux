#!/usr/bin/env bash
# prev: graphics

# Source config file and libraries
source "${ANARCHY_CONFIG_FILE}"
for library in "${ANARCHY_LIBRARIES_DIRECTORY}"/*.sh; do
    source "${library}"
done

log "Choosing desktop environment"

menu_title="${de_op_msg}"
if ! (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${desktop_msg}" 10 60); then
    if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${desktop_cancel_msg}" 10 60); then
        log "Didn't choose a desktop environment"
        return 0
    fi
fi

while (true); do
    CHOSEN_DE=$(dialog --ok-button "${done_msg}" --cancel-button "${cancel}" --menu "${environment_msg}" 13 75 3 \
        "${customized_de}"	"${customized_de_msg}" \
        "${more_de}"		"${more_de_msg}" \
        "${more_wm}"		"${more_wm_msg}" 3>&1 1>&2 2>&3)

    if [[ -z "${CHOSEN_DE}" ]]; then
        if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${desktop_cancel_msg}" 10 60); then
            log "Didn't choose a desktop environment"
            return 0
        fi
    elif [[ "${CHOSEN_DE}" == "${customized_de}" ]]; then
        # TODO: Update desktop names
        CHOSEN_DE=$(dialog --ok-button "${done_msg}" --cancel-button "${back}" --menu "${environment_msg}" 15 60 5 \
            "Anarchy-budgie"	"${de24}" \
            "Anarchy-cinnamon"  "${de23}" \
            "Anarchy-gnome"		"${de22}" \
            "Anarchy-openbox"   "${de18}" \
            "Anarchy-xfce4"     "${de15}" 3>&1 1>&2 2>&3)

        if [[ -n "${CHOSEN_DE}" ]]; then
            break
        fi
    elif [[ "${CHOSEN_DE}" == "${more_de}" ]]; then
        CHOSEN_DE=$(dialog --separate-output --ok-button "${done_msg}" --cancel-button "${back}" --checklist "${environment_msg}" 19 60 10 \
            "budgie"		    "${de17}" OFF \
            "cinnamon"      	"${de5}" OFF \
            "deepin"		    "${de14}" OFF \
            "gnome"         	"${de4}" OFF \
            "gnome-flashback"	"${de19}" OFF \
            "KDE plasma"    	"${de6}" OFF \
            "lxde"          	"${de2}" OFF \
            "lxqt"          	"${de3}" OFF \
            "mate"          	"${de1}" OFF \
            "xfce4"         	"${de0}" OFF 3>&1 1>&2 2>&3)

        if [[ -n "${CHOSEN_DE}" ]]; then
            break
        fi
    elif [[ "${CHOSEN_DE}" == "${more_wm}" ]]; then
        CHOSEN_DE=$(dialog --separate-output --ok-button "${done_msg}" --cancel-button "${back}" --checklist "${environment_msg}" 19 60 10 \
            "awesome"               "${de9}" OFF \
            "bspwm"                 "${de13}" OFF \
            "enlightenment"         "${de7}" OFF \
            "fluxbox"               "${de11}" OFF \
            "i3"                    "${de10}" OFF \
            "openbox"               "${de8}" OFF \
            "sway"                  "${de21}" OFF \
            "qtile"                 "${de25}" OFF \
            "xmonad"                "${de16}" OFF 3>&1 1>&2 2>&3)

        if [[ -n "${CHOSEN_DE}" ]]; then
            break
        fi
    else
        break
    fi
done

log "Chose ${CHOSEN_DE} desktop environment"

while read env; do
    case "${env}" in
        "Anarchy-xfce4")
            config_env="${env}"
            start_term="exec startxfce4"
            desktop_packages+=('xfce4' 'xfce4-goodies' 'file-roller' 'p7zip' 'zip'
                'unrar' "${extras}")
        ;;

        "Anarchy-budgie")
            config_env="${env}"
            start_term="export XDG_CURRENT_DESKTOP=Budgie:GNOME ; \
                exec budgie-desktop"
            desktop_packages+=('budgie-desktop' 'mousepad' 'terminator' 'nautilus'
                'gnome-backgrounds' 'gnome-control-center' "${extras}")
        ;;

        "Anarchy-cinnamon")
            config_env="${env}"
            start_term="exec cinnamon-session"
            desktop_packages+=('cinnamon' 'cinnamon-translations' 'gnome-terminal'
                'file-roller' 'p7zip' 'zip' 'unrar' 'terminator' "${extras}")
        ;;

        "Anarchy-gnome")
            config_env="${env}"
            start_term="exec gnome-session"
            desktop_packages+=('gnome' 'gnome-extra' 'terminator' "${extras}")
        ;;

        "Anarchy-openbox")
            config_env="${env}"
            start_term="exec openbox-session"
            desktop_packages+=('openbox' 'thunar' 'thunar-volman' 'xfce4-terminal'
                'xfce4-panel' 'xfce4-whiskermenu-plugin' 'xcompmgr'
                'transset-df' 'obconf' 'lxappearance-obconf' 'wmctrl'
                'gxmessage' 'xfce4-pulseaudio-plugin' 'xfdesktop' 'xdotool'
                'opensnap' 'ristretto' 'oblogout' 'obmenu-generator'
                'polkit-gnome' 'tumbler' 'openbox-themes' "${extras}")
        ;;

        "xfce4")
            start_term="exec startxfce4"
            desktop_packages+=('xfce4')

            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${extra_msg0}" 10 60); then
                desktop_packages+=('xfce4-goodies')
            fi
        ;;

        "budgie")
            start_term="export XDG_CURRENT_DESKTOP=Budgie:GNOME ; \
                exec budgie-desktop"
            desktop_packages+=('budgie-desktop' 'arc-icon-theme' 'arc-gtk-theme'
                'elementary-icon-theme')

            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${extra_msg6}" 10 60); then
                desktop_packages+=('gnome')
            fi
        ;;

        "gnome")
            start_term="exec gnome-session"
            desktop_packages+=('gnome')

            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${extra_msg1}" 10 60); then
                desktop_packages+=('gnome-extra')
            fi
        ;;

        "gnome-flashback")
            start_term="export XDG_CURRENT_DESKTOP=GNOME-Flashback:GNOME ; \
                exec gnome-session --session=gnome-flashback-metacity"
            desktop_packages+=('gnome-flashback')

            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${extra_msg1}" 10 60); then
                desktop_packages+=('gnome-backgrounds' 'gnome-control-center'
                    'gnome-screensaver' 'gnome-applets sensors-applet')
            fi
        ;;

        "mate")
            start_term="exec mate-session"

            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${extra_msg2}" 10 60); then
                desktop_packages+=('mate' 'mate-extra' 'gtk-engine-murrine')
            else
                desktop_packages+=('mate' 'gtk-engine-murrine')
            fi
        ;;

        "KDE plasma")
            start_term="exec startplasma-x11"

            if (dialog --defaultno --yes-button "${yes}" --no-button "${no}" --yesno "\n${extra_msg3}" 10 60); then
                desktop_packages+=('plasma-desktop' 'konsole' 'dolphin' 'plasma-nm'
                    'plasma-pa' 'libxshmfence' 'kscreen')

                if "${uses_laptop}"; then
                    desktop_packages+=('powerdevil')
                fi
            else
                desktop_packages+=('plasma' 'ark' 'aspell-en' 'cdrdao' 'clementine'
                    'dolphin' 'dolphin-plugins' 'ffmpegthumbs' 'gwenview'
                    'k3b' 'kate' 'kcalc' 'kdialog' 'kfind' 'kdeconnect'
                    'kdegraphics-thumbnailers' 'kdenetwork-filesharing'
                    'kdesu' 'kdelibs4support' 'kipi-plugins' 'khelpcenter'
                    'konsole' 'kwalletmanager' 'okular' 'spectacle'
                    'transmission-qt' 'krita' 'kolourpaint' 'korganizer'
                    'knetattach' 'falkon' 'kdenlive')
            fi
        ;;

        "deepin")
            start_term="exec startdde"
            desktop_packages+=('deepin')

            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${extra_msg4}" 10 60); then
                desktop_packages+=('deepin-extra' "${kernel}-headers")
            fi
        ;;

        "xmonad")
            start_term="exec xmonad"
            desktop_packages+=('xmonad')

            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${extra_msg5}" 10 60); then
                desktop_packages+=('xmonad-contrib')
            fi
        ;;

        "cinnamon")
            desktop_packages+=('cinnamon' 'cinnamon-translations' 'gnome-terminal'
                'file-roller' 'p7zip' 'zip' 'unrar')
            start_term="exec cinnamon-session"
        ;;

        "lxde")
            start_term="exec startlxde"

            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${gtk3_var}" 10 60); then
                desktop_packages+=('lxde-gtk3')
                GTK3=true
            else
                desktop_packages+=('lxde')
            fi
        ;;

        "lxqt")
            start_term="exec startlxqt"
            desktop_packages+=('lxqt' 'oxygen-icons' 'breeze-icons')
        ;;

        "enlightenment")
            start_term="exec enlightenment_start"
            desktop_packages+=('enlightenment' 'terminology')
        ;;

        "bspwm")
            start_term="sxhkd & ; exec bspwm"
            desktop_packages+=('bspwm' 'sxhkd')
        ;;

        "fluxbox")
            start_term="exec startfluxbox"
            desktop_packages+=('fluxbox')
        ;;

        "openbox")
            start_term="exec openbox-session"
            desktop_packages+=('openbox')
        ;;

        "awesome")
            start_term="exec awesome"
            desktop_packages+=('awesome')
        ;;

        "i3")
            start_term="exec i3"
            desktop_packages+=('i3')
        ;;

        "sway")
            start_term="sway"
            desktop_packages+=('sway')
        ;;

        "qtile")
            config_env="${env}"
            start_term="exec qtile"
            desktop_packages+=('qtile')
        ;;
    esac
done <<< "${CHOSEN_DE}"

log "Checking if inside virtual machine"

# Check if user is inside virtual machine
case "$(systemd-detect-virt)" in
    oracle)
        virt="vbox"
        inside_virtual_machine=true
    ;;

    vmware)
        virt="vmware"
        inside_virtual_machine=true
    ;;

    qemu)
        virt="qemu"
        inside_virtual_machine=true
    ;;

    kvm)
        virt="kvm"
        inside_virtual_machine=true
    ;;

    microsoft)
        virt="hyper-v"
        inside_virtual_machine=true
    ;;

    xen)
        virt="xen"
        inside_virtual_machine=true
    ;;
esac

if [[ ${inside_virtual_machine} == true ]]; then
    log "Detected virtual machine ${virt}"
else
    log "Virtual machine not detected"
fi

while (true); do
    if "${inside_virtual_machine}"; then
        case "${virt}" in
            vbox)
                dialog --ok-button "${ok}" --msgbox "\n${vbox_msg}" 10 60
                GPU=('virtualbox-guest-utils')

                if [[ "${kernel}" == "linux" ]]; then
                    GPU+=('virtualbox-guest-modules-arch')
                else
                    GPU+=('virtualbox-guest-dkms')
                fi
            ;;

            vmware)
                dialog --ok-button "${ok}" --msgbox "\n${vmware_msg}" 10 60
                GPU=('xf86-video-vmware' 'xf86-input-vmmouse' 'open-vm-tools'
                    'net-tools' 'gtkmm' 'mesa' 'mesa-libgl')
            ;;

            hyper-v)
                dialog --ok-button "${ok}" --msgbox "\n${hyperv_msg}" 10 60
                GPU=('xf86-video-fbdev' 'mesa-libgl')
            ;;

            *)
                dialog --ok-button "${ok}" --msgbox "\n${vm_msg}" 10 60
                GPU=('xf86-video-fbdev' 'mesa-libgl')
            ;;
        esac
        break
    fi

    if "${uses_nvidia_hardware}" ; then
        graphics_driver=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${graphics_msg}" 18 60 6 \
            "${default}"            "${gr0}" \
            "xf86-video-ati"        "${gr4}" \
            "xf86-video-amdgpu"     "${gr10}" \
            "xf86-video-intel"      "${gr5}" \
            "xf86-video-nouveau"    "${gr8}" \
            "xf86-video-vesa"	    "${gr1}" \
            "NVIDIA"                "${gr2} ->" 3>&1 1>&2 2>&3)

        exit_code=$?
        GPU+=("${graphics_driver}")
    else
        graphics_driver=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${graphics_msg}" 17 60 5 \
            "${default}"            "${gr0}" \
            "xf86-video-ati"        "${gr4}" \
            "xf86-video-amdgpu"     "${gr10}" \
            "xf86-video-intel"      "${gr5}" \
            "xf86-video-nouveau"    "${gr8}" \
            "xf86-video-vesa"       "${gr1}" 3>&1 1>&2 2>&3)

        exit_code=$?
        GPU+=("${graphics_driver}")
    fi

    log "Selected graphics drivers ${GPU[*]}"

    if [[ "${exit_code}" -gt 0 ]]; then
        if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "${desktop_cancel_msg}" 10 60); then
            return
        fi
    elif [[ "${graphics_driver}" == "NVIDIA" ]]; then
        nvidia_driver=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${nvidia_msg}" 15 60 4 \
            "${gr0}"        "->" \
            "nvidia"        "${gr6}" \
            "nvidia-390xx"  "${gr9}" \
            "nvidia-340xx"  "${gr7}" 3>&1 1>&2 2>&3)

        GPU+=("${nvidia_driver}")

        if [[ $? -eq 0 ]]; then
            if [[ "${graphics_driver}" == "${gr0}" ]]; then
                pci_id=$(lspci -nn | grep "VGA" | egrep -o '\[.*\]' | awk '{print $NF}' | sed 's/.*://;s/]//')

                if (<"${ANARCHY_DIRECTORY}"/etc/nvidia390.xx grep "${pci_id}" &>/dev/null); then
                    if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${nvidia_390msg}" 10 60); then
                        if [[ "${kernel}" == "lts" ]]; then
                            GPU=('nvidia-390xx-lts')
                        else
                            GPU=('nvidia-390xx')
                        fi

                        GPU+=('nvidia-390xx-libgl' 'nvidia-390xx-utils'
                            'nvidia-settings')
                        break
                    fi
                elif (<"${anarchy_directory}"/etc/nvidia340.xx grep "${pci_id}" &>/dev/null); then
                     if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${nvidia_340msg}" 10 60); then
                         if [[ "${kernel}" == "lts" ]]; then
                                 GPU=('nvidia-340xx-lts')
                         else
                                 GPU=('nvidia-340xx')
                         fi

                         GPU+=('nvidia-340xx-libgl' 'nvidia-340xx-utils'
                            'nvidia-settings')
                         break
                     fi
                elif (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${nvidia_curmsg}" 10 60); then
                    if [[ "${kernel}" == "lts" ]]; then
                        GPU=('nvidia-lts')
                    else
                        GPU=('nvidia')
                    fi

                    if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${nvidia_modeset_msg}" 10 60); then
                        drm=true
                    fi

                    GPU+=('nvidia-libgl' 'nvidia-utils' 'nvidia-settings')
                    break
                fi
            elif [[ "${nvidia_driver}" == "nvidia" ]]; then
                if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${nvidia_modeset_msg}" 10 60); then
                    drm=true
                fi

                if [[ "${kernel}" == "lts" ]]; then
                    GPU=('nvidia-lts' 'nvidia-libgl' 'nvidia-utils'
                        'nvidia-settings')
                fi
                break
            fi
        fi
    elif [[ "${graphics_driver}" == "${default}" ]]; then
        GPU=("${default_GPU}" 'mesa-libgl')
        break
    else
        GPU+=('mesa-libgl')
        break
    fi
done

desktop_packages+=("${GPU[@]}" "${de_defaults}")

if [[ "${net_util}" == "networkmanager" ]] ; then
    # TODO: Update the code to find package without grep
    if (<<<"${desktop_packages[*]}" grep "plasma" &> /dev/null); then
        desktop_packages+=('plasma-nm')
    else
        desktop_packages+=('network-manager-applet')
    fi
fi

if (dialog --defaultno --yes-button "${yes}" --no-button "${no}" --yesno "\n${touchpad_msg}" 10 60); then
    # TODO: Update the code to find package without grep
    if (<<<"${desktop_packages[*]}" grep "gnome" &> /dev/null); then
        desktop_packages+=('xf86-input-libinput')
    else
        desktop_packages+=('xf86-input-synaptics')
    fi
fi

if "${enable_bluetooth}" ; then
    if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${blueman_msg}" 10 60); then
        desktop_packages+=('blueman')
    fi
fi

if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${dm_msg}" 10 60); then
    display_manager=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${dm_msg1}" 13 64 4 \
        "lightdm"	"${dm1}" \
        "gdm"		"${dm0}" \
        "lxdm"		"${dm2}" \
        "sddm"		"${dm3}" 3>&1 1>&2 2>&3)

    if [[ $? -eq 0 ]]; then
        if [[ "${display_manager}" == "lightdm" ]]; then
            desktop_packages+=("${display_manager}" 'lightdm-gtk-greeter' 'lightdm-gtk-greeter-settings')
        elif [[ "${display_manager}" == "lxdm" ]] && "${install_gtk3}"; then
            desktop_packages+=("${display_manager}-gtk3")
        else
            desktop_packages+=("${display_manager}")
        fi

        enable_display_manager=true
    else
        dialog --ok-button "${ok}" --msgbox "\n${startx_msg}" 10 60
    fi
else
    dialog --ok-button "${ok}" --msgbox "\n${startx_msg}" 10 60
fi

enable_desktop=true

log "Adding selected packages to package list"

# Append the selected packages to the packages file
for package in "${desktop_packages[@]}"; do
    echo "${package}" >> "${ANARCHY_PACKAGES_FILE}"
done

log "Added selected packages to package list"
return 0