#!/usr/bin/env bash

# Source config file and libraries
source "${ANARCHY_CONFIG_FILE}"
for library in "${ANARCHY_LIBRARIES_PATH}"/*.sh; do
    source "${library}"
done

log "Setting user"

while (true); do
    menu_title="${user_op_msg}"

    # Create menu based on existing users from ${tmp_passwd}
    user="$(dialog --extra-button --extra-label "${edit}" --ok-button "${new_user}" --cancel-button "${done_msg}" --menu "${user_menu_msg}" 13 55 4 \
        "$(while IFS= read -r i ; do
            echo "$i $(<"${tmp_passwd}" cut -d: -f1,2 | grep -w $i | cut -d: -f2)"
        done <<<"$(sort "${tmp_passwd}" | cut -d: -f1)")" "root" "${root_sh}" 3>&1 1>&2 2>&3)"

    # User menu exit status
    case $? in
        1) # Cancel
            break
        ;;

        0) # Add new user
            while (true); do
                # Prompt for username
                user="$(dialog --cancel-button "${cancel}" --ok-button "${ok}" --inputbox "\n${user_msg1}" 12 55 "" 3>&1 1>&2 2>&3)"

                if [[ $? -gt 0 ]]; then
                    break
                elif [[ -z "${user}" ]]; then
                    dialog --ok-button "${ok}" --msgbox "\n${user_err_msg2}" 10 60
                elif (grep "^${user}:" "${tmp_passwd}" &>/dev/null); then
                    dialog --ok-button "${ok}" --msgbox "\n${user_err_msg1}" 10 60
                elif (<<<"${user}" grep "^[0-9]\|[A-Z\[\$\!\'\"\`\\|%&#@()_-+=<>~;:/?.,^{}]\|]" &> /dev/null); then
                    dialog --ok-button "${ok}" --msgbox "\n${user_err_msg}" 10 60
                else
                    while (true); do
                        full_user="$(dialog --cancel-button "${cancel}" --ok-button "${ok}" --inputbox "\n${user_msg2}" 12 55 3>&1 1>&2 2>&3)"

                        if [[ $? -gt 0 ]]; then
                            break
                        elif (<<<"${full_user}" grep "," &> /dev/null); then
                            dialog --ok-button "${ok}" --msgbox "\n${fulluser_err_msg}" 10 60
                        elif "$(cut -d: -f1,4 <"${tmp_passwd}" | grep -w "${user}" | cut -d: -f2 | grep -w "${full_user}")"; then
                            dialog --ok-button "${ok}" --msgbox "\n${fulluser_err_msg1}" 10 60
                        else
                            run set-password
                            log "Added user: ${user}"

                            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${sudo_var}" 10 60); then
                                export sudo_user=yes
                            else
                                export sudo_user=no
                            fi

                            echo "${user}:${sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" >> "${tmp_passwd}"

                            if "${menu_enter}" ; then
                                run add-user
                            fi
                            break
                        fi
                    done

                    break
                fi
            done

            log "Added user ${user}"
        ;;

        *)
            while (true); do
                menu_title="${user_op_msg1}"

                user_sh="$(grep -w "${user}" <"${tmp_passwd}" | cut -d: -f2)"
                full_user="$(grep -w "${user}" <"${tmp_passwd}" | cut -d: -f4)"
                ENCRYPTED_PASSWORD="$(grep -w "${user}" <"${tmp_passwd}" | cut -d: -f5)"
                sudo_user="$(grep -w "${user}" <"${tmp_passwd}" | cut -d: -f3)"

                if (grep -w "${user}" <"${tmp_passwd}" | cut -d: -f3 | grep "yes" &>/dev/null); then
                    sudo="${yes}"
                else
                    sudo="${no}"
                fi

                paswd="$(<"${tmp_passwd}" grep -v "${user}")"

                if [[ "${user}" == "root" ]]; then
                    user_sh="${root_sh}"
                    sudo="${yes}"
                    full_user="superuser"

                    user_edit="$(dialog --ok-button "${select}" --cancel-button "${back}" --menu "${user_edit_var}" 15 55 2 \
                        "${change_pass}" "->" \
                        "${change_sh}" "->" 3>&1 1>&2 2>&3)"
                else
                    user_edit="$(dialog --ok-button "${select}" --cancel-button "${back}" --menu "${user_edit_var}" 17 65 5 \
                        "${change_pass}" "->" \
                        "${change_sh}" "->" \
                        "${change_su}" "->" \
                        "${change_fn}" "->" \
                        "${del_user}" "->" 3>&1 1>&2 2>&3)"
                fi

                case "${user_edit}" in
                    "${change_pass}")
                        run set-password

                        if "${menu_enter}" ; then
                            input="$(echo "${ENCRYPTED_PASSWORD}" | openssl enc -aes-256-cbc -a -d -salt -pass pass:"${SSL_KEY}")"

                            (printf "${input}\n${input}" | arch-chroot "${CHROOT_MOUNT_POINT}" passwd "${user}") &> /dev/null &

                            pid=$!
                            pri=0.1
                            msg="${wait_load} \n\n \Z1> \Z2passwd ${user}\Zn"
                            load "${pid}" "${pri}" "${msg}"

                            echo -e "${paswd}\n${user}:${user_sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" > "${tmp_passwd}"

                        elif [[ "${user}" == "root" ]]; then
                            root_crypt="${ENCRYPTED_PASSWORD}"
                        else
                            echo -e "${paswd}\n${user}:${user_sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" > "${tmp_passwd}"
                        fi
                    ;;

                    "${change_sh}")
                        user_sh="$(dialog --ok-button "${select}" --cancel-button "${cancel}" --menu "${user_shell_var}" 15 55 6 \
                            "bash"  "${shell5}" \
                            "dash"  "${shell0}" \
                            "fish"  "${shell1}" \
                            "mksh"  "${shell2}" \
                            "tcsh"  "${shell3}" \
                            "zsh"   "${shell4}" 3>&1 1>&2 2>&3)"

                        if [[ $? -eq 0 ]]; then
                            # TODO: Fix grep check
                            if ! (<<<"${base_install}" grep "${user_sh}" &>/dev/null); then
                                echo "${user_sh}" >> "${ANARCHY_PACKAGES_FILE}"
                            fi

                            case "${user_sh}" in
                                zsh) export user_sh=/usr/bin/zsh ;;
                                fish) export user_sh=/bin/bash ;;
                                *) export user_sh=/bin/"${user_sh}" ;;
                            esac
                        fi

                        if "${menu_enter}" ; then
                            arch-chroot "${CHROOT_MOUNT_POINT}" chsh "${user}" -s "${user_sh}" &>/dev/null

                            if [[ "${user}" != "root" ]]; then
                                echo -e "${paswd}\n${user}:${user_sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" > "${tmp_passwd}"
                            fi
                        elif [[ "${user}" == "root" ]]; then
                            export root_sh="${user_sh}"
                        else
                            echo -e "${paswd}\n${user}:${user_sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" > "${tmp_passwd}"
                        fi
                    ;;

                    "${change_su}")
                        if [[ "${sudo}" == "${yes}" ]]; then
                            if (dialog --defaultno --yes-button "${yes}" --no-button "${no}" --yesno "\n${sudo_var1}" 10 60); then
                                export sudo_user="no"
                            fi
                        else
                            if (dialog --yes-button "${yes}" --no-button "${no}" --yesno "\n${sudo_var}" 10 60); then
                                export sudo_user="yes"
                            fi
                        fi

                        if "${menu_enter}"; then
                            (sed -i '/%wheel ALL=(ALL) ALL/s/^#//' ${CHROOT_MOUNT_POINT}/etc/sudoers
                                arch-chroot "${CHROOT_MOUNT_POINT}" usermod -a -G wheel "${user}") &> /dev/null &

                                pid=$!
                                pri=0.1
                                msg="$wait_load \n\n \Z1> \Z2usermod -a -G wheel ${user}\Zn"
                                load "${pid}" "${pri}" "${msg}"
                        fi

                        echo -e "${paswd}\n${user}:${user_sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" > "${tmp_passwd}"
                    ;;

                    "${change_fn}")
                        while (true); do
                            full_user="$(dialog --cancel-button "${cancel}" --ok-button "${ok}" --inputbox "\n${user_msg2}" 12 55 3>&1 1>&2 2>&3)"

                            if [[ $? -ne 0 ]]; then
                                break
                            elif (<<<"${full_user}" grep "," &> /dev/null); then
                                dialog --ok-button "${ok}" --msgbox "\n${fulluser_err_msg}" 10 60
                            else
                                if "${menu_enter}" ; then
                                    if [[ "${full_user}" == "" ]]; then
                                        full_user="${user}"
                                    fi

                                    arch-chroot "${CHROOT_MOUNT_POINT}" chfn -f "${full_user}" "${user}" &>/dev/null
                                fi

                                echo -e "${paswd}\n${user}:${user_sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" > "${tmp_passwd}"
                                break
                            fi
                        done
                    ;;

                    "${del_user}")
                        if (dialog --defaultno --yes-button "${yes}" --no-button "${no}" --yesno "\n${deluser_var}" 10 60); then
                            if "${menu_enter}"; then
                                arch-chroot "${CHROOT_MOUNT_POINT}" userdel --remove "${user}" &>/dev/null
                            fi

                            echo -e "${paswd}" > "${tmp_passwd}"
                            break
                        else
                            echo -e "${paswd}\n${user}:${user_sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" > "${tmp_passwd}"
                            break
                        fi
                    ;;

                    *)	if [[ "${user}" != "root" ]]; then
                            echo -e "${paswd}\n${user}:${user_sh}:${sudo_user}:${full_user}:${ENCRYPTED_PASSWORD}" > "${tmp_passwd}"
                        fi
                        break
                    ;;
                esac
            done
        ;;
    esac
done